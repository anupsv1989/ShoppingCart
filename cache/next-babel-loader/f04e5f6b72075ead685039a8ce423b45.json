{"ast":null,"code":"// import { delay } from \"redux-saga\";\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\n\nfunction* fetchUser(action) {\n  try {\n    // const user = yield call(Api.fetchUser, action.payload.userId);\n    yield put({\n      type: \"USER_FETCH_SUCCEEDED\",\n      user: user\n    });\n  } catch (e) {\n    yield put({\n      type: \"USER_FETCH_FAILED\",\n      message: e.message\n    });\n  }\n}\n\nfunction* onFetchItem() {\n  // yield delay(4000);\n  console.log(\"Inside sAga\"); // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\n\n  let res = localStorage.getItem(\"parentReleaseData\");\n  yield put({\n    type: \"FETCH_ITEM_SUCCESS\",\n    result: res\n  });\n} // export function* watchAgeUp() {\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\n// }\n\n\nexport default function* rootSaga() {\n  yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n  yield takeEvery(\"FETCH_ITEM\", onFetchItem);\n}","map":{"version":3,"sources":["D:/RandDChamber/MyGitHub/ShoppingCart/shoppingcart/redux/rootSaga.js"],"names":["call","put","takeEvery","takeLatest","fetchUser","action","type","user","e","message","onFetchItem","console","log","res","localStorage","getItem","result","rootSaga"],"mappings":"AAAA;AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;;AAGA,UAAUC,SAAV,CAAoBC,MAApB,EAA4B;AACxB,MAAI;AACA;AACA,UAAMJ,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE,sBAAR;AAAgCC,MAAAA,IAAI,EAAEA;AAAtC,KAAD,CAAT;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACR,UAAMP,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAE,mBAAR;AAA6BG,MAAAA,OAAO,EAAED,CAAC,CAACC;AAAxC,KAAD,CAAT;AACH;AACJ;;AAGD,UAAUC,WAAV,GAAwB;AACpB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAFoB,CAGpB;;AACA,MAAIC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAV;AACA,QAAMd,GAAG,CAAC;AAAEK,IAAAA,IAAI,EAAE,oBAAR;AAA8BU,IAAAA,MAAM,EAAEH;AAAtC,GAAD,CAAT;AACH,C,CAED;AACA;AACA;;;AAGA,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMf,SAAS,CAAC,sBAAD,EAAyBE,SAAzB,CAAf;AACA,QAAMF,SAAS,CAAC,YAAD,EAAeQ,WAAf,CAAf;AACH","sourcesContent":["// import { delay } from \"redux-saga\";\r\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\n\r\n\r\nfunction* fetchUser(action) {\r\n    try {\r\n        // const user = yield call(Api.fetchUser, action.payload.userId);\r\n        yield put({ type: \"USER_FETCH_SUCCEEDED\", user: user });\r\n    } catch (e) {\r\n        yield put({ type: \"USER_FETCH_FAILED\", message: e.message });\r\n    }\r\n}\r\n\r\n\r\nfunction* onFetchItem() {\r\n    // yield delay(4000);\r\n    console.log(\"Inside sAga\")\r\n    // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\r\n    let res = localStorage.getItem(\"parentReleaseData\")\r\n    yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\r\n}\r\n\r\n// export function* watchAgeUp() {\r\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\r\n// }\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\r\n    yield takeEvery(\"FETCH_ITEM\", onFetchItem);\r\n}"]},"metadata":{},"sourceType":"module"}