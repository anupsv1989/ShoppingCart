{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(onFetchItem),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// import { delay } from \"redux-saga\";\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport actions from \"./action\";\nvar headers = {\n  'Content-Type': 'application/json'\n};\nexport function get(url) {\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            try {\n              var options = {\n                method: 'GET',\n                headers: headers\n              };\n              fetch(url, options).then(function (res) {\n                if (200 === res.status) {\n                  return res.json();\n                } else {\n                  var error = {\n                    response: res\n                  };\n                  console.log(\"Error\");\n                }\n              }).then(function (res) {\n                resolve(res);\n              });\n            } catch (error) {\n              console.log(\"Error\");\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar fetchListData = function fetchListData() {\n  return _regeneratorRuntime.async(function fetchListData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(get(\"https://api.jsonbin.io/b/5e8c3a45af7c476bc47e477d\"));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction onFetchItem() {\n  var errMsg, searchResult;\n  return _regeneratorRuntime.wrap(function onFetchItem$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          // yield delay(4000);\n          console.log(\"Inside sAga On Fethc Item\"); // let res = localStorage.getItem(\"parentReleaseData\")\n          // yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\n\n          errMsg = \"Error in fetching data.\";\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(fetchListData);\n\n        case 5:\n          searchResult = _context3.sent;\n\n          if (!(searchResult !== undefined)) {\n            _context3.next = 14;\n            break;\n          }\n\n          if (!(searchResult.items.length > 0)) {\n            _context3.next = 12;\n            break;\n          }\n\n          _context3.next = 10;\n          return put(actions.onFetchItemSuccess(searchResult));\n\n        case 10:\n          _context3.next = 14;\n          break;\n\n        case 12:\n          _context3.next = 14;\n          return put(actions.onFetchItemError(errMsg));\n\n        case 14:\n          _context3.next = 20;\n          break;\n\n        case 16:\n          _context3.prev = 16;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 20;\n          return put(actions.onFetchItemError(errMsg));\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[2, 16]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(\"FETCH_ITEM\", onFetchItem);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}","map":null,"metadata":{},"sourceType":"module"}