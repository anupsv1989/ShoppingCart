{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onFetchItem),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// import { delay } from \"redux-saga\";\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\n\nfunction fetchList(action) {\n  return _regeneratorRuntime.wrap(function fetchList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: \"USER_FETCH_SUCCEEDED\",\n            user: user\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: \"USER_FETCH_FAILED\",\n            message: _context.t0.message\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction onFetchItem() {\n  var res;\n  return _regeneratorRuntime.wrap(function onFetchItem$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // yield delay(4000);\n          console.log(\"Inside sAga On Fethc Item\"); // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\n\n          res = localStorage.getItem(\"parentReleaseData\");\n          _context2.next = 4;\n          return put({\n            type: \"FETCH_ITEM_SUCCESS\",\n            result: res\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // export function* watchAgeUp() {\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\n// }\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(\"FETCH_ITEM\", onFetchItem);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["D:/RandDChamber/MyGitHub/ShoppingCart/shoppingcart/redux/rootSaga.js"],"names":["fetchList","onFetchItem","rootSaga","call","put","takeEvery","takeLatest","action","type","user","message","console","log","res","localStorage","getItem","result"],"mappings":";;oDAIUA,S;qDAUAC,W;qDAaeC,Q;;AA3BzB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;;AAGA,SAAUN,SAAV,CAAoBO,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMH,GAAG,CAAC;AAAEI,YAAAA,IAAI,EAAE,sBAAR;AAAgCC,YAAAA,IAAI,EAAEA;AAAtC,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQ,iBAAML,GAAG,CAAC;AAAEI,YAAAA,IAAI,EAAE,mBAAR;AAA6BE,YAAAA,OAAO,EAAE,YAAEA;AAAxC,WAAD,CAAT;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,SAAUT,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACAU,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAFJ,CAGI;;AACIC,UAAAA,GAJR,GAIcC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAJd;AAAA;AAKI,iBAAMX,GAAG,CAAC;AAAEI,YAAAA,IAAI,EAAE,oBAAR;AAA8BQ,YAAAA,MAAM,EAAEH;AAAtC,WAAD,CAAT;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAQA;AACA;AACA;;;AAGA,eAAe,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,SAAS,CAAC,YAAD,EAAeJ,WAAf,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// import { delay } from \"redux-saga\";\r\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\n\r\n\r\nfunction* fetchList(action) {\r\n    try {\r\n        // const user = yield call(Api.fetchUser, action.payload.userId);\r\n        yield put({ type: \"USER_FETCH_SUCCEEDED\", user: user });\r\n    } catch (e) {\r\n        yield put({ type: \"USER_FETCH_FAILED\", message: e.message });\r\n    }\r\n}\r\n\r\n\r\nfunction* onFetchItem() {\r\n    // yield delay(4000);\r\n    console.log(\"Inside sAga On Fethc Item\")\r\n    // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\r\n    let res = localStorage.getItem(\"parentReleaseData\")\r\n    yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\r\n}\r\n\r\n// export function* watchAgeUp() {\r\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\r\n// }\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(\"FETCH_ITEM\", onFetchItem);\r\n}"]},"metadata":{},"sourceType":"module"}