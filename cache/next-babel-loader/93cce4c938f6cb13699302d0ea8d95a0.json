{"ast":null,"code":"// import { delay } from \"redux-saga\";\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport actions from \"./action\";\nlet headers = {\n  'Content-Type': 'application/json'\n};\nexport async function get(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      const options = {\n        method: 'GET',\n        headers: headers\n      };\n      fetch(url, options).then(res => {\n        if (200 === res.status) {\n          return res.json();\n        } else {\n          const error = {\n            response: res\n          };\n          console.log(\"Error\");\n        }\n      }).then(res => {\n        resolve(res);\n      });\n    } catch (error) {\n      console.log(\"Error\");\n    }\n  });\n}\n\nconst fetchListData = async () => await get(\"https://api.jsonbin.io/b/5e8c3a45af7c476bc47e477d\");\n\nfunction* onFetchItem() {\n  // yield delay(4000);\n  console.log(\"Inside sAga On Fethc Item\"); // let res = localStorage.getItem(\"parentReleaseData\")\n  // yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\n\n  let errMsg = \"Error in fetching data.\";\n\n  try {\n    const searchResult = yield call(fetchListData); //Saga is suspended until the Promise returned by call\n\n    if (searchResult !== undefined) {\n      if (searchResult.items.length > 0) {\n        yield put(actions.onFetchItemSuccess(searchResult)); //which instructs the middleware to dispatch a action\n      } else {\n        yield put(actions.onFetchItemError(errMsg));\n      }\n    }\n  } catch (error) {\n    // notification('error', \"Something went wrong. Please try again later.\");\n    yield put(actions.onFetchItemError(errMsg));\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeEvery(\"FETCH_ITEM\", onFetchItem);\n}","map":{"version":3,"sources":["D:/RandDChamber/MyGitHub/ShoppingCart/shoppingcart/redux/rootSaga.js"],"names":["call","all","put","takeEvery","takeLatest","actions","headers","get","url","Promise","resolve","reject","options","method","fetch","then","res","status","json","error","response","console","log","fetchListData","onFetchItem","errMsg","searchResult","undefined","items","length","onFetchItemSuccess","onFetchItemError","rootSaga"],"mappings":"AAAA;AACA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,UAApC,QAAsD,oBAAtD;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,IAAIC,OAAO,GAAG;AACV,kBAAgB;AADN,CAAd;AAIA,OAAO,eAAeC,GAAf,CAAmBC,GAAnB,EAAwB;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,QAAI;AACA,YAAMC,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAE,KADI;AAEZP,QAAAA,OAAO,EAAEA;AAFG,OAAhB;AAIAQ,MAAAA,KAAK,CAACN,GAAD,EAAMI,OAAN,CAAL,CACKG,IADL,CACUC,GAAG,IAAI;AACT,YAAI,QAAQA,GAAG,CAACC,MAAhB,EAAwB;AACpB,iBAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,SAFD,MAEO;AACH,gBAAMC,KAAK,GAAG;AAAEC,YAAAA,QAAQ,EAAEJ;AAAZ,WAAd;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,OARL,EASKP,IATL,CASUC,GAAG,IAAI;AACTN,QAAAA,OAAO,CAACM,GAAD,CAAP;AACH,OAXL;AAaH,KAlBD,CAkBE,OAAOG,KAAP,EAAc;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,GAtBM,CAAP;AAuBH;;AAED,MAAMC,aAAa,GAAG,YAClB,MAAMhB,GAAG,CAAC,mDAAD,CADb;;AAGA,UAAUiB,WAAV,GAAwB;AACpB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAFoB,CAGpB;AACA;;AAEA,MAAIG,MAAM,GAAG,yBAAb;;AACA,MAAI;AACA,UAAMC,YAAY,GAAG,MAAM1B,IAAI,CAACuB,aAAD,CAA/B,CADA,CAC+C;;AAC/C,QAAIG,YAAY,KAAKC,SAArB,EAAgC;AAC5B,UAAID,YAAY,CAACE,KAAb,CAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,cAAM3B,GAAG,CAACG,OAAO,CAACyB,kBAAR,CAA2BJ,YAA3B,CAAD,CAAT,CAD+B,CACqB;AACvD,OAFD,MAEO;AACH,cAAMxB,GAAG,CAACG,OAAO,CAAC0B,gBAAR,CAAyBN,MAAzB,CAAD,CAAT;AACH;AACJ;AACJ,GATD,CASE,OAAON,KAAP,EAAc;AACZ;AACA,UAAMjB,GAAG,CAACG,OAAO,CAAC0B,gBAAR,CAAyBN,MAAzB,CAAD,CAAT;AACH;AACJ;;AAGD,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAM7B,SAAS,CAAC,YAAD,EAAeqB,WAAf,CAAf;AACH","sourcesContent":["// import { delay } from \"redux-saga\";\r\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport actions from \"./action\";\r\n\r\nlet headers = {\r\n    'Content-Type': 'application/json'\r\n};\r\n\r\nexport async function get(url) {\r\n    return new Promise(function (resolve, reject) {\r\n        try {\r\n            const options = {\r\n                method: 'GET',\r\n                headers: headers,\r\n            };\r\n            fetch(url, options)\r\n                .then(res => {\r\n                    if (200 === res.status) {\r\n                        return res.json();\r\n                    } else {\r\n                        const error = { response: res };\r\n                        console.log(\"Error\");\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    resolve(res);\r\n                });\r\n\r\n        } catch (error) {\r\n            console.log(\"Error\");\r\n        }\r\n    });\r\n}\r\n\r\nconst fetchListData = async () =>\r\n    await get(\"https://api.jsonbin.io/b/5e8c3a45af7c476bc47e477d\");\r\n\r\nfunction* onFetchItem() {\r\n    // yield delay(4000);\r\n    console.log(\"Inside sAga On Fethc Item\")\r\n    // let res = localStorage.getItem(\"parentReleaseData\")\r\n    // yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\r\n\r\n    let errMsg = \"Error in fetching data.\"\r\n    try {\r\n        const searchResult = yield call(fetchListData);//Saga is suspended until the Promise returned by call\r\n        if (searchResult !== undefined) {\r\n            if (searchResult.items.length > 0) {\r\n                yield put(actions.onFetchItemSuccess(searchResult));//which instructs the middleware to dispatch a action\r\n            } else {\r\n                yield put(actions.onFetchItemError(errMsg));\r\n            }\r\n        }\r\n    } catch (error) {\r\n        // notification('error', \"Something went wrong. Please try again later.\");\r\n        yield put(actions.onFetchItemError(errMsg));\r\n    }\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(\"FETCH_ITEM\", onFetchItem);\r\n}"]},"metadata":{},"sourceType":"module"}