{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(onFetchItem),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// import { delay } from \"redux-saga\";\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\nvar headers = {\n  'Content-Type': 'application/json'\n};\nexport function get(url, data) {\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            try {\n              if (null === url || undefined === url || '' === url) {\n                reject('URL not present.');\n              } else {\n                var token = getCookie('id_token');\n\n                if (undefined !== token) {\n                  headers.Authorization = 'Bearer ' + token;\n                }\n\n                var options = {\n                  credentials: 'include',\n                  // Needed to set the cookies in few browsers (Safari)\n                  method: 'GET',\n                  headers: headers // body: JSON.stringify(data)\n\n                };\n                fetch(url, options).then(function (res) {\n                  if (200 === res.status) {\n                    return res.json();\n                  } else {\n                    var error = {\n                      response: res\n                    };\n\n                    _validateError(error, resolve, reject);\n                  }\n                }).then(function (res) {\n                  resolve(res);\n                });\n              }\n            } catch (error) {\n              _validateError(error, resolve, reject);\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction onFetchItem() {\n  var res;\n  return _regeneratorRuntime.wrap(function onFetchItem$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // yield delay(4000);\n          console.log(\"Inside sAga On Fethc Item\"); // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\n\n          res = localStorage.getItem(\"parentReleaseData\");\n          _context2.next = 4;\n          return put({\n            type: \"FETCH_ITEM_SUCCESS\",\n            result: res\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n} // export function* watchAgeUp() {\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\n// }\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(\"FETCH_ITEM\", onFetchItem);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["D:/RandDChamber/MyGitHub/ShoppingCart/shoppingcart/redux/rootSaga.js"],"names":["onFetchItem","rootSaga","call","all","put","takeEvery","takeLatest","headers","get","url","data","Promise","resolve","reject","undefined","token","getCookie","Authorization","options","credentials","method","fetch","then","res","status","json","error","response","_validateError","console","log","localStorage","getItem","type","result"],"mappings":";;oDA4CUA,W;qDAceC,Q;;AA1DzB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,UAApC,QAAsD,oBAAtD;AAGA,IAAIC,OAAO,GAAG;AACV,kBAAgB;AADN,CAAd;AAGA,OAAO,SAAeC,GAAf,CAAmBC,GAAnB,EAAwBC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEI,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,gBAAI;AACA,kBAAI,SAASJ,GAAT,IAAgBK,SAAS,KAAKL,GAA9B,IAAqC,OAAOA,GAAhD,EAAqD;AACjDI,gBAAAA,MAAM,CAAC,kBAAD,CAAN;AACH,eAFD,MAEO;AACH,oBAAME,KAAK,GAAGC,SAAS,CAAC,UAAD,CAAvB;;AACA,oBAAIF,SAAS,KAAKC,KAAlB,EAAyB;AACrBR,kBAAAA,OAAO,CAACU,aAAR,GAAwB,YAAYF,KAApC;AACH;;AACD,oBAAMG,OAAO,GAAG;AACZC,kBAAAA,WAAW,EAAE,SADD;AACY;AACxBC,kBAAAA,MAAM,EAAE,KAFI;AAGZb,kBAAAA,OAAO,EAAEA,OAHG,CAIZ;;AAJY,iBAAhB;AAMAc,gBAAAA,KAAK,CAACZ,GAAD,EAAMS,OAAN,CAAL,CACKI,IADL,CACU,UAAAC,GAAG,EAAI;AACT,sBAAI,QAAQA,GAAG,CAACC,MAAhB,EAAwB;AACpB,2BAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,mBAFD,MAEO;AACH,wBAAMC,KAAK,GAAG;AAAEC,sBAAAA,QAAQ,EAAEJ;AAAZ,qBAAd;;AACAK,oBAAAA,cAAc,CAACF,KAAD,EAAQd,OAAR,EAAiBC,MAAjB,CAAd;AACH;AACJ,iBARL,EASKS,IATL,CASU,UAAAC,GAAG,EAAI;AACTX,kBAAAA,OAAO,CAACW,GAAD,CAAP;AACH,iBAXL;AAYH;AACJ,aA3BD,CA2BE,OAAOG,KAAP,EAAc;AACZE,cAAAA,cAAc,CAACF,KAAD,EAAQd,OAAR,EAAiBC,MAAjB,CAAd;AACH;AACJ,WA/BM,CAFJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCP,SAAUb,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACA6B,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAFJ,CAII;;AACIP,UAAAA,GALR,GAKcQ,YAAY,CAACC,OAAb,CAAqB,mBAArB,CALd;AAAA;AAMI,iBAAM5B,GAAG,CAAC;AAAE6B,YAAAA,IAAI,EAAE,oBAAR;AAA8BC,YAAAA,MAAM,EAAEX;AAAtC,WAAD,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CASA;AACA;AACA;;;AAGA,eAAe,SAAUtB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMI,SAAS,CAAC,YAAD,EAAeL,WAAf,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// import { delay } from \"redux-saga\";\r\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\n\r\n\r\nlet headers = {\r\n    'Content-Type': 'application/json'\r\n};\r\nexport async function get(url, data) {\r\n    //\r\n    return new Promise(function (resolve, reject) {\r\n        try {\r\n            if (null === url || undefined === url || '' === url) {\r\n                reject('URL not present.');\r\n            } else {\r\n                const token = getCookie('id_token');\r\n                if (undefined !== token) {\r\n                    headers.Authorization = 'Bearer ' + token;\r\n                }\r\n                const options = {\r\n                    credentials: 'include', // Needed to set the cookies in few browsers (Safari)\r\n                    method: 'GET',\r\n                    headers: headers,\r\n                    // body: JSON.stringify(data)\r\n                };\r\n                fetch(url, options)\r\n                    .then(res => {\r\n                        if (200 === res.status) {\r\n                            return res.json();\r\n                        } else {\r\n                            const error = { response: res };\r\n                            _validateError(error, resolve, reject);\r\n                        }\r\n                    })\r\n                    .then(res => {\r\n                        resolve(res);\r\n                    });\r\n            }\r\n        } catch (error) {\r\n            _validateError(error, resolve, reject);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction* onFetchItem() {\r\n    // yield delay(4000);\r\n    console.log(\"Inside sAga On Fethc Item\")\r\n\r\n    // yield put({ type: \"DELETE_ITEM_SUCCESS\", value: 1 });\r\n    let res = localStorage.getItem(\"parentReleaseData\")\r\n    yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\r\n}\r\n\r\n// export function* watchAgeUp() {\r\n//     yield takeLatest(\"AGE_UP\", ageUpAsync);\r\n// }\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(\"FETCH_ITEM\", onFetchItem);\r\n}"]},"metadata":{},"sourceType":"module"}