{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(onFetchItem),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\n// import { delay } from \"redux-saga\";\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport actions from \"./action\";\nvar headers = {\n  'Content-Type': 'application/json'\n};\nexport function get(url) {\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            try {\n              var options = {\n                method: 'GET',\n                headers: headers\n              };\n              fetch(url, options).then(function (res) {\n                if (200 === res.status) {\n                  return res.json();\n                } else {\n                  var error = {\n                    response: res\n                  };\n                  console.log(\"Error\");\n                }\n              }).then(function (res) {\n                resolve(res);\n              });\n            } catch (error) {\n              console.log(\"Error\");\n            }\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar fetchListData = function fetchListData() {\n  return _regeneratorRuntime.async(function fetchListData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(get(\"https://api.jsonbin.io/b/5e8c3a45af7c476bc47e477d\"));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction onFetchItem() {\n  var errMsg, searchResult;\n  return _regeneratorRuntime.wrap(function onFetchItem$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          // yield delay(4000);\n          console.log(\"Inside sAga On Fethc Item\"); // let res = localStorage.getItem(\"parentReleaseData\")\n          // yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\n\n          errMsg = \"Error in fetching data.\";\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(fetchListData);\n\n        case 5:\n          searchResult = _context3.sent;\n\n          if (!(searchResult !== undefined)) {\n            _context3.next = 15;\n            break;\n          }\n\n          if (!(searchResult.items.length > 0)) {\n            _context3.next = 13;\n            break;\n          }\n\n          console.log(\"Inside sAga On Fethc Item\", searchResult);\n          _context3.next = 11;\n          return put(actions.onFetchItemSuccess(searchResult));\n\n        case 11:\n          _context3.next = 15;\n          break;\n\n        case 13:\n          _context3.next = 15;\n          return put(actions.onFetchItemError(errMsg));\n\n        case 15:\n          _context3.next = 21;\n          break;\n\n        case 17:\n          _context3.prev = 17;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 21;\n          return put(actions.onFetchItemError(errMsg));\n\n        case 21:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[2, 17]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(\"FETCH_ITEM\", onFetchItem);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["D:/RandDChamber/MyGitHub/AdobeShoppingCart/ShoppingCart/redux/rootSaga.js"],"names":["onFetchItem","rootSaga","call","all","put","takeEvery","takeLatest","actions","headers","get","url","Promise","resolve","reject","options","method","fetch","then","res","status","json","error","response","console","log","fetchListData","errMsg","searchResult","undefined","items","length","onFetchItemSuccess","onFetchItemError"],"mappings":";;oDAqCUA,W;qDAwBeC,Q;;AA7DzB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,UAApC,QAAsD,oBAAtD;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,IAAIC,OAAO,GAAG;AACV,kBAAgB;AADN,CAAd;AAIA,OAAO,SAAeC,GAAf,CAAmBC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,2CACI,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,gBAAI;AACA,kBAAMC,OAAO,GAAG;AACZC,gBAAAA,MAAM,EAAE,KADI;AAEZP,gBAAAA,OAAO,EAAEA;AAFG,eAAhB;AAIAQ,cAAAA,KAAK,CAACN,GAAD,EAAMI,OAAN,CAAL,CACKG,IADL,CACU,UAAAC,GAAG,EAAI;AACT,oBAAI,QAAQA,GAAG,CAACC,MAAhB,EAAwB;AACpB,yBAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,iBAFD,MAEO;AACH,sBAAMC,KAAK,GAAG;AAAEC,oBAAAA,QAAQ,EAAEJ;AAAZ,mBAAd;AACAK,kBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,eARL,EASKP,IATL,CASU,UAAAC,GAAG,EAAI;AACTN,gBAAAA,OAAO,CAACM,GAAD,CAAP;AACH,eAXL;AAaH,aAlBD,CAkBE,OAAOG,KAAP,EAAc;AACZE,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,WAtBM,CADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACZhB,GAAG,CAAC,mDAAD,CADS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAGA,SAAUT,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;AACAuB,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAFJ,CAGI;AACA;;AAEIE,UAAAA,MANR,GAMiB,yBANjB;AAAA;AAAA;AAQ6B,iBAAMxB,IAAI,CAACuB,aAAD,CAAV;;AAR7B;AAQcE,UAAAA,YARd;;AAAA,gBASYA,YAAY,KAAKC,SAT7B;AAAA;AAAA;AAAA;;AAAA,gBAUgBD,YAAY,CAACE,KAAb,CAAmBC,MAAnB,GAA4B,CAV5C;AAAA;AAAA;AAAA;;AAWgBP,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCG,YAAzC;AAXhB;AAYgB,iBAAMvB,GAAG,CAACG,OAAO,CAACwB,kBAAR,CAA2BJ,YAA3B,CAAD,CAAT;;AAZhB;AAAA;AAAA;;AAAA;AAAA;AAcgB,iBAAMvB,GAAG,CAACG,OAAO,CAACyB,gBAAR,CAAyBN,MAAzB,CAAD,CAAT;;AAdhB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmBQ,iBAAMtB,GAAG,CAACG,OAAO,CAACyB,gBAAR,CAAyBN,MAAzB,CAAD,CAAT;;AAnBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,eAAe,SAAUzB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMI,SAAS,CAAC,YAAD,EAAeL,WAAf,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// import { delay } from \"redux-saga\";\r\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport actions from \"./action\";\r\n\r\nlet headers = {\r\n    'Content-Type': 'application/json'\r\n};\r\n\r\nexport async function get(url) {\r\n    return new Promise(function (resolve, reject) {\r\n        try {\r\n            const options = {\r\n                method: 'GET',\r\n                headers: headers,\r\n            };\r\n            fetch(url, options)\r\n                .then(res => {\r\n                    if (200 === res.status) {\r\n                        return res.json();\r\n                    } else {\r\n                        const error = { response: res };\r\n                        console.log(\"Error\");\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    resolve(res);\r\n                });\r\n\r\n        } catch (error) {\r\n            console.log(\"Error\");\r\n        }\r\n    });\r\n}\r\n\r\nconst fetchListData = async () =>\r\n    await get(\"https://api.jsonbin.io/b/5e8c3a45af7c476bc47e477d\");\r\n\r\nfunction* onFetchItem() {\r\n    // yield delay(4000);\r\n    console.log(\"Inside sAga On Fethc Item\")\r\n    // let res = localStorage.getItem(\"parentReleaseData\")\r\n    // yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\r\n\r\n    let errMsg = \"Error in fetching data.\"\r\n    try {\r\n        const searchResult = yield call(fetchListData);//Saga is suspended until the Promise returned by call\r\n        if (searchResult !== undefined) {\r\n            if (searchResult.items.length > 0) {\r\n                console.log(\"Inside sAga On Fethc Item\", searchResult)\r\n                yield put(actions.onFetchItemSuccess(searchResult));//which instructs the middleware to dispatch a action\r\n            } else {\r\n                yield put(actions.onFetchItemError(errMsg));\r\n            }\r\n        }\r\n    } catch (error) {\r\n        // notification('error', \"Something went wrong. Please try again later.\");\r\n        yield put(actions.onFetchItemError(errMsg));\r\n    }\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield takeEvery(\"FETCH_ITEM\", onFetchItem);\r\n}"]},"metadata":{},"sourceType":"module"}