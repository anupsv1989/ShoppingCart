{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from \"react\";\nimport { Card, Col, Row, Button } from 'antd';\nimport Link from 'next/link';\nimport actions from \"../redux/action\";\nimport { connect } from \"react-redux\";\nimport { PlusOutlined, MinusOutlined } from '@ant-design/icons';\nconst {\n  getItemsinCart\n} = actions;\n\nclass CartList extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"calculatePriceSum\", () => {\n      let price = 0;\n      let discountedPrice = 0;\n      this.state.cartDisplayItems.map(x => {\n        price += x.item.price.actual;\n        discountedPrice += x.item.price.display;\n      });\n      let discPrice = discountedPrice - price;\n      this.setState({\n        totalPriceOfItems: price,\n        totalPriceDisplay: discountedPrice,\n        totalDiscountedPrice: discPrice\n      });\n      return price;\n    });\n\n    _defineProperty(this, \"increment\", (item, index) => {\n      let price = this.state.totalPriceOfItems;\n      let discPrice = this.state.totalDiscountedPrice;\n      let firstPrice = this.state.totalPriceDisplay;\n      price += item.price.actual;\n      firstPrice += item.price.display;\n      discPrice = firstPrice - price;\n      this.setState({\n        totalPriceOfItems: price,\n        totalPriceDisplay: firstPrice,\n        totalDiscountedPrice: discPrice,\n        [index + item.name]: this.state[index + item.name] ? this.state[index + item.name] + 1 : this.state.initialItems + 1\n      });\n    });\n\n    _defineProperty(this, \"decrement\", (item, index) => {\n      let price = this.state.totalPriceOfItems;\n      let discPrice = this.state.totalDiscountedPrice;\n      let firstPrice = this.state.totalPriceDisplay;\n\n      if (this.state[index + item.name] != undefined) {\n        price -= item.price.actual;\n        firstPrice -= item.price.display;\n        discPrice = firstPrice - price;\n      }\n\n      this.setState({\n        totalPriceOfItems: price,\n        totalPriceDisplay: firstPrice,\n        totalDiscountedPrice: discPrice,\n        [index + item.name]: this.state[index + item.name] ? this.state[index + item.name] - 1 : this.state.initialItems - 1\n      });\n    });\n\n    _defineProperty(this, \"removeItems\", (item, idx) => {\n      let arr = this.state.cartDisplayItems;\n\n      let _this = this;\n\n      let index = arr.map(x => {\n        return x.key;\n      }).indexOf(item.key);\n      arr.splice(index, 1);\n      this.setState({\n        cartDisplayItems: arr\n      }, () => {\n        if (_this.state.cartDisplayItems.length > 0) {\n          _this.calculatePriceSum();\n        }\n      });\n    });\n\n    this.state = {\n      cartDisplayItems: [],\n      initialItems: 1,\n      totalPriceOfItems: 0,\n      totalDiscountedPrice: 0,\n      totalPriceDisplay: 0\n    };\n  }\n\n  componentDidMount() {\n    let _this = this;\n\n    this.setState({\n      cartDisplayItems: this.props.itemsInCart\n    }, () => {\n      if (_this.props.itemsInCart && _this.props.itemsInCart.length > 0) _this.calculatePriceSum();\n    });\n    console.log(\" this.props.itemsInCart did mount\", this.props.itemsInCart);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"NExt props in cartjs\", nextProps);\n  }\n\n  render() {\n    const {\n      itemsInCart\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"cartContainerDiv\"\n    }, this.state.cartDisplayItems && this.state.cartDisplayItems.length > 0 ? __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"cartContainerDiv__cartLeftNav\"\n    }, __jsx(\"div\", null, this.state.cartDisplayItems.map((i, index) => __jsx(Row, {\n      gutter: 16,\n      key: index,\n      className: \"cartContainerDiv__cartLeftNav--Row\"\n    }, __jsx(Col, {\n      span: 6\n    }, __jsx(\"div\", {\n      className: \"cartContainerDiv__cartLeftNav--cartListDiv\"\n    }, __jsx(\"img\", {\n      alt: \"example\",\n      src: \"https://cdn.britannica.com/s:700x500/77/170477-050-1C747EE3/Laptop-computer.jpg\"\n    }))), __jsx(Col, {\n      span: 6\n    }, __jsx(\"div\", {\n      className: \"cartContainerDiv__cartLeftNav--cartListText\"\n    }, __jsx(\"span\", null, i.item.name), __jsx(\"p\", null, __jsx(\"span\", null, __jsx(\"strong\", null, \"\\u20B9 \", i.item.price.actual), \" \"), __jsx(\"span\", {\n      className: \"shoppingListWrap__listCols--cardprice\"\n    }, i.item.price.display), __jsx(\"span\", {\n      className: \"shoppingListWrap__listCols--carddiscount\"\n    }, i.item.discount, \" % off\")))), __jsx(Col, {\n      span: 6\n    }, __jsx(\"div\", {\n      className: \"cartContainerDiv__cartLeftNav--cartListText\"\n    }, __jsx(Button, {\n      type: \"primary\",\n      shape: \"circle\",\n      icon: __jsx(PlusOutlined, null),\n      size: \"middle\",\n      onClick: () => this.increment(i.item, index)\n    }), __jsx(Button, {\n      type: \"dashed\",\n      style: {\n        margin: \"5px\"\n      }\n    }, this.state[index + i.item.name] > 0 ? this.state[index + i.item.name] : this.state.initialItems), __jsx(Button, {\n      type: \"primary\",\n      shape: \"circle\",\n      icon: __jsx(MinusOutlined, null),\n      size: \"middle\",\n      disabled: this.state[index + i.item.name] == 1 ? true : false,\n      onClick: () => this.decrement(i.item, index)\n    }))), __jsx(Col, {\n      span: 6\n    }, __jsx(\"div\", {\n      className: \"cartContainerDiv__cartLeftNav--cartListText\"\n    }, __jsx(Button, {\n      type: \"link\",\n      danger: true,\n      onClick: () => this.removeItems(i.item, index)\n    }, __jsx(\"strong\", null, \" Remove \")))))))), __jsx(\"div\", {\n      className: \"cartContainerDiv__cartRightNav\"\n    }, __jsx(Card, {\n      title: \"Price Details\",\n      className: \"cartContainerDiv__cartRightNav--card\"\n    }, __jsx(Row, {\n      gutter: 16,\n      className: \"cartContainerDiv__cartRightNav--row\"\n    }, __jsx(Col, {\n      span: 16\n    }, \"Price\"), __jsx(Col, {\n      span: 8\n    }, this.state.totalPriceDisplay)), __jsx(Row, {\n      gutter: 16,\n      className: \"cartContainerDiv__cartRightNav--row\"\n    }, __jsx(Col, {\n      span: 16\n    }, \"Discount\"), __jsx(Col, {\n      span: 8\n    }, this.state.totalDiscountedPrice)), __jsx(\"hr\", null), __jsx(Row, {\n      gutter: 16,\n      className: \"cartContainerDiv__cartRightNav--row\"\n    }, __jsx(Col, {\n      span: 16\n    }, \"Total\"), __jsx(Col, {\n      span: 8\n    }, this.state.totalPriceOfItems))))) : __jsx(\"div\", null, \"Cart is Empty To add items into cart click\", __jsx(Link, {\n      href: \"/\"\n    }, __jsx(\"a\", null, \" Home\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    itemsInCart: state.itemsInCart\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getItemsinCart\n})(CartList);","map":null,"metadata":{},"sourceType":"module"}