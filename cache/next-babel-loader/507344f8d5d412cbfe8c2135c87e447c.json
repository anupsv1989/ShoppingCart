{"ast":null,"code":"// import { delay } from \"redux-saga\";\nimport { call, all, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport actions from \"./action\";\nlet headers = {\n  'Content-Type': 'application/json'\n};\nexport async function get(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      const options = {\n        method: 'GET',\n        headers: headers\n      };\n      fetch(url, options).then(res => {\n        if (200 === res.status) {\n          return res.json();\n        } else {\n          const error = {\n            response: res\n          };\n          console.log(\"Error\");\n        }\n      }).then(res => {\n        resolve(res);\n      });\n    } catch (error) {\n      console.log(\"Error\");\n    }\n  });\n}\n\nconst fetchListData = async () => await get(\"https://api.jsonbin.io/b/5e8c3a45af7c476bc47e477d\");\n\nfunction* onFetchItem() {\n  // yield delay(4000);\n  console.log(\"Inside sAga On Fethc Item\"); // let res = localStorage.getItem(\"parentReleaseData\")\n  // yield put({ type: \"FETCH_ITEM_SUCCESS\", result: res });\n\n  let errMsg = \"Error in fetching data.\";\n\n  try {\n    const searchResult = yield call(fetchListData); //Saga is suspended until the Promise returned by call\n\n    if (searchResult !== undefined) {\n      if (searchResult.items.length > 0) {\n        yield put(actions.onFetchItemSuccess(searchResult)); //which instructs the middleware to dispatch a action\n      } else {\n        yield put(actions.onFetchItemError(errMsg));\n      }\n    }\n  } catch (error) {\n    // notification('error', \"Something went wrong. Please try again later.\");\n    yield put(actions.onFetchItemError(errMsg));\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeEvery(\"FETCH_ITEM\", onFetchItem);\n}","map":null,"metadata":{},"sourceType":"module"}